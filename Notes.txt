Work back to ARCOS R package - see how they deal with noisey data. 
Tracking spreads

Validate against R ARCOS package - run the same inputs in both and see the results.
Use generated and real data sets

Work on improvements for convex hull after data validation steps.
Work on improvements for binarized data. grey thresh?

May need to take average vs max of knn distances

Implement tracking. 


knnsearch output
    the closest neighbor to point in Y is X(idx) with distance d

    get cluster numbers of all neighbors
    get cluster numbers of neighbors within epsilon (*sm)
    if there are ANY clusters within epsilon
        get the unique ones
        reassign current frame cluster numbers to cluster numbers of neighbors in previous frame
        
        logical split if more than one neighbor - not sure what operation they're using the segregate those two

        locVclPrevNNuni = unique clusters in previous frame

        if (length(locVclPrevNNuni) > 1) {
            # Current cluster is close to more than 1 clusters in previous frame(s)
            locDT[get(cols$frame) == iFrame &
                    get(cols$clid) == iCl,
                  (cols$clid) := locVclPrevNNall]

          } else {
            # Current cluster is close to only 1 cluster in previous frame(s)
            locDT[get(cols$frame) == iFrame &
                    get(cols$clid) == iCl,
                  (cols$clid) := rep(locVclPrevNNuni, nrow(locDTposCurr))]


Tasks from 2/18/22 onward
1. Create script to generate synthetic spreads
2. 3D dbscan
3. Format outputs per Michael's requirements

Synthetic spreads - 
select some random points in t1 and make them active
In t2, Get k nearest neighbors within epsilon of points and makee them active. 


Take in points only or binarized data?
Points only = synthetic spreads only
Points + bin = synthetic spreads + background noise

